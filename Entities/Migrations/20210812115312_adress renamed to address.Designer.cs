// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Entities.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20210812115312_adress renamed to address")]
    partial class adressrenamedtoaddress
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "French_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DisabledAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("IFU")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Entities.Models.ApproProduit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApprovisionnementsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateEnr")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_enr");

                    b.Property<Guid>("IdUserEnr")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_user_enr");

                    b.Property<Guid>("ProduitsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QteApp")
                        .HasColumnType("int")
                        .HasColumnName("Qte_app");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ApprovisionnementsId" }, "IX_FK_ApprovisionnementsAppro_Produit");

                    b.HasIndex(new[] { "ProduitsId" }, "IX_FK_ProduitsAppro_Produit");

                    b.ToTable("Appro_Produit");
                });

            modelBuilder.Entity("Entities.Models.ApproSite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateApp")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_app");

                    b.Property<DateTime>("DateEnr")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_enr");

                    b.Property<Guid>("DisponibilitesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUserEnr")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_user_enr");

                    b.Property<int>("QteApp")
                        .HasColumnType("int")
                        .HasColumnName("Qte_App");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisponibilitesId" }, "IX_FK_DisponibilitesAppro_Site");

                    b.ToTable("Appro_Site");
                });

            modelBuilder.Entity("Entities.Models.Approvisionnement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAppr")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_appr");

                    b.Property<DateTime>("DateEnr")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_enr");

                    b.Property<Guid>("FournisseursId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdUserEnr")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_user_enr");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FournisseursId" }, "IX_FK_FournisseursApprovisionnements");

                    b.ToTable("Approvisionnements");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Entities.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Addresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ifu")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IFU");

                    b.Property<string>("NomEntreprise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nom_Entreprise");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Entities.Models.Disponibilite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateEnr")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_enr");

                    b.Property<string>("Disponible")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("IdUserEnr")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_user_enr");

                    b.Property<Guid>("ProduitsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantite")
                        .HasColumnType("int");

                    b.Property<int>("SeuilAlerte")
                        .HasColumnType("int")
                        .HasColumnName("Seuil_alerte");

                    b.Property<Guid?>("SitesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProduitsId" }, "IX_FK_ProduitsDisponibilites");

                    b.HasIndex(new[] { "SitesId" }, "IX_FK_SitesDisponibilites");

                    b.ToTable("Disponibilites");
                });

            modelBuilder.Entity("Entities.Models.Fournisseur", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Addresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnr")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_enr");

                    b.Property<Guid>("IdUserEnr")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_user_enr");

                    b.Property<string>("NomPrenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Nom_Prenom");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Fournisseurs");
                });

            modelBuilder.Entity("Entities.Models.Historique", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateEnr")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_enr");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("User_Id");

                    b.HasKey("Id");

                    b.ToTable("Historique");
                });

            modelBuilder.Entity("Entities.Models.NumeroCompte", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Banque")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NumeroCompte");
                });

            modelBuilder.Entity("Entities.Models.Parametre", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("EMecef")
                        .HasColumnType("bit")
                        .HasColumnName("eMecef");

                    b.Property<bool>("Mecef")
                        .HasColumnType("bit");

                    b.Property<string>("NumPort")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Num_Port");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parametre");
                });

            modelBuilder.Entity("Entities.Models.Produit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibelleTaxeSpecifique")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Libelle_Taxe_Specifique");

                    b.Property<int>("MntTaxeSpecifique")
                        .HasColumnType("int")
                        .HasColumnName("Mnt_Taxe_Specifique");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Prix")
                        .HasColumnType("int");

                    b.Property<int>("PrixVente")
                        .HasColumnType("int")
                        .HasColumnName("Prix_Vente");

                    b.Property<int>("QteStk")
                        .HasColumnType("int")
                        .HasColumnName("Qte_Stk");

                    b.Property<int>("SeuilAlerte")
                        .HasColumnType("int")
                        .HasColumnName("Seuil_alerte");

                    b.Property<string>("TauxImposition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Taux_Imposition");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoriesId" }, "IX_FK_CategoriesProduits");

                    b.ToTable("Produits");
                });

            modelBuilder.Entity("Entities.Models.Profil", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ApproProduit")
                        .HasColumnType("bit")
                        .HasColumnName("Appro_produit");

                    b.Property<bool>("ApproSite")
                        .HasColumnType("bit")
                        .HasColumnName("Appro_site");

                    b.Property<bool>("AutreSortie")
                        .HasColumnType("bit")
                        .HasColumnName("Autre_sortie");

                    b.Property<bool>("Categorie")
                        .HasColumnType("bit");

                    b.Property<bool>("ConsulterStockAlerte")
                        .HasColumnType("bit")
                        .HasColumnName("Consulter_stock_alerte");

                    b.Property<bool>("Historique")
                        .HasColumnType("bit");

                    b.Property<bool>("InventaireProduit")
                        .HasColumnType("bit")
                        .HasColumnName("Inventaire_Produit");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ModifierFacture")
                        .HasColumnType("bit")
                        .HasColumnName("Modifier_Facture");

                    b.Property<bool>("NormaliserFacture")
                        .HasColumnType("bit")
                        .HasColumnName("Normaliser_Facture");

                    b.Property<bool>("NumeroCompte")
                        .HasColumnType("bit")
                        .HasColumnName("Numero_compte");

                    b.Property<bool>("Produit")
                        .HasColumnType("bit");

                    b.Property<bool>("Profil1")
                        .HasColumnType("bit")
                        .HasColumnName("Profil");

                    b.Property<bool>("Site")
                        .HasColumnType("bit");

                    b.Property<bool>("SituationJournaliere")
                        .HasColumnType("bit")
                        .HasColumnName("Situation_Journaliere");

                    b.Property<bool>("StockSite")
                        .HasColumnType("bit")
                        .HasColumnName("Stock_site");

                    b.Property<bool>("Utilisateur")
                        .HasColumnType("bit");

                    b.Property<bool>("ValiderFacture")
                        .HasColumnType("bit")
                        .HasColumnName("Valider_Facture");

                    b.Property<bool>("Vente")
                        .HasColumnType("bit");

                    b.Property<bool>("Visibilite")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Profils");
                });

            modelBuilder.Entity("Entities.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibelleTaxeSpecifique")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Libelle_Taxe_specifique");

                    b.Property<int>("MntTaxeSpecifique")
                        .HasColumnType("int")
                        .HasColumnName("Mnt_Taxe_Specifique");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrixVente")
                        .HasColumnType("int")
                        .HasColumnName("Prix_Vente");

                    b.Property<string>("TauxImposition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Taux_Imposition");

                    b.Property<Guid?>("VentProdId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Vent_Prod_Id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CategoriesId" }, "IX_FK_Services_Categories");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Entities.Models.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Addresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Entities.Models.Utilisateur", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodeUser")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Code_User");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NewConnexion")
                        .HasColumnType("bit")
                        .HasColumnName("New_Connexion");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfilsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Pwd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SitesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProfilsId" }, "IX_FK_ProfilsUtilisateurs");

                    b.HasIndex(new[] { "SitesId" }, "IX_FK_SitesUtilisateurs");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("Entities.Models.VentProd", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DisponibilitesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Localisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MntRemise")
                        .HasColumnType("int")
                        .HasColumnName("Mnt_Remise");

                    b.Property<int>("PrixVente")
                        .HasColumnType("int")
                        .HasColumnName("Prix_vente");

                    b.Property<int>("QteVendu")
                        .HasColumnType("int")
                        .HasColumnName("Qte_Vendu");

                    b.Property<Guid?>("ServicesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TauxImposition")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Taux_Imposition");

                    b.Property<Guid>("VentesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DisponibilitesId" }, "IX_FK_DisponibilitesVent_Prod");

                    b.HasIndex(new[] { "ServicesId" }, "IX_FK_Vent_Prod_Vent_Prod");

                    b.HasIndex(new[] { "VentesId" }, "IX_FK_VentesVent_Prod");

                    b.ToTable("Vent_Prod");
                });

            modelBuilder.Entity("Entities.Models.Vente", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Aib")
                        .HasColumnType("int")
                        .HasColumnName("AIB");

                    b.Property<bool>("Api")
                        .HasColumnType("bit")
                        .HasColumnName("API");

                    b.Property<Guid>("ClientsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodeMecef")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Code_Mecef");

                    b.Property<string>("CodeMecefAvoir")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Code_Mecef_Avoir");

                    b.Property<string>("CompteurTotalMecef")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Compteur_Total_Mecef");

                    b.Property<string>("CompteurTotalMecefAvoir")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Compteur_Total_Mecef_Avoir");

                    b.Property<string>("CompteurTypeFactureMecef")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Compteur_Type_Facture_Mecef");

                    b.Property<string>("CompteurTypeFactureMecefAvoir")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Compteur_Type_Facture_Mecef_Avoir");

                    b.Property<DateTime?>("DateEcheance")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_Echeance");

                    b.Property<DateTime>("DateEnr")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_enr");

                    b.Property<string>("DateMecef")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Date_Mecef");

                    b.Property<string>("DateMecefAvoir")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Date_Mecef_Avoir");

                    b.Property<DateTime?>("DateValidation")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_validation");

                    b.Property<DateTime>("DateVent")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_vent");

                    b.Property<Guid>("IdUserEnr")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_user_enr");

                    b.Property<Guid?>("IdValidateur")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id_Validateur");

                    b.Property<string>("LibelleFacture")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Libelle_Facture");

                    b.Property<string>("ModePaiement")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Mode_Paiement");

                    b.Property<int?>("MontantTotal")
                        .HasColumnType("int")
                        .HasColumnName("Montant_Total");

                    b.Property<string>("NimMecef")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NIM_Mecef");

                    b.Property<string>("NumDispAib")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Num_Disp_Aib");

                    b.Property<long>("NumFact")
                        .HasColumnType("bigint")
                        .HasColumnName("Num_Fact");

                    b.Property<Guid?>("NumeroCompteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("QrcodeMecef")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QRCode_Mecef");

                    b.Property<string>("QrcodeMecefAvoir")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QRCode_Mecef_Avoir");

                    b.Property<double>("TauxRemise")
                        .HasColumnType("float")
                        .HasColumnName("Taux_Remise");

                    b.Property<string>("TypeFacture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Type_Facture");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ClientsId" }, "IX_FK_ClientsVentes");

                    b.HasIndex(new[] { "NumeroCompteId" }, "IX_FK_NumeroCompteVentes");

                    b.ToTable("Ventes");
                });

            modelBuilder.Entity("Entities.Models.Visibilite", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Visibilites");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Models.ApproProduit", b =>
                {
                    b.HasOne("Entities.Models.Approvisionnement", "Approvisionnement")
                        .WithMany("ApproProduits")
                        .HasForeignKey("ApprovisionnementsId")
                        .HasConstraintName("FK_ApprovisionnementsAppro_Produit")
                        .IsRequired();

                    b.HasOne("Entities.Models.Produit", "Produit")
                        .WithMany("ApproProduits")
                        .HasForeignKey("ProduitsId")
                        .HasConstraintName("FK_ProduitsAppro_Produit")
                        .IsRequired();

                    b.Navigation("Approvisionnement");

                    b.Navigation("Produit");
                });

            modelBuilder.Entity("Entities.Models.ApproSite", b =>
                {
                    b.HasOne("Entities.Models.Disponibilite", "Disponibilite")
                        .WithMany("ApproSites")
                        .HasForeignKey("DisponibilitesId")
                        .HasConstraintName("FK_DisponibilitesAppro_Site")
                        .IsRequired();

                    b.Navigation("Disponibilite");
                });

            modelBuilder.Entity("Entities.Models.Approvisionnement", b =>
                {
                    b.HasOne("Entities.Models.Fournisseur", "Fournisseur")
                        .WithMany("Approvisionnements")
                        .HasForeignKey("FournisseursId")
                        .HasConstraintName("FK_FournisseursApprovisionnements")
                        .IsRequired();

                    b.Navigation("Fournisseur");
                });

            modelBuilder.Entity("Entities.Models.Disponibilite", b =>
                {
                    b.HasOne("Entities.Models.Produit", "Produit")
                        .WithMany("Disponibilites")
                        .HasForeignKey("ProduitsId")
                        .HasConstraintName("FK_ProduitsDisponibilites")
                        .IsRequired();

                    b.HasOne("Entities.Models.Site", "Site")
                        .WithMany("Disponibilites")
                        .HasForeignKey("SitesId")
                        .HasConstraintName("FK_SitesDisponibilites");

                    b.Navigation("Produit");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Entities.Models.Produit", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("Produits")
                        .HasForeignKey("CategoriesId")
                        .HasConstraintName("FK_CategoriesProduits")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.Service", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoriesId")
                        .HasConstraintName("FK_Services_Categories")
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.Utilisateur", b =>
                {
                    b.HasOne("Entities.Models.Profil", "Profil")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("ProfilsId")
                        .HasConstraintName("FK_ProfilsUtilisateurs");

                    b.HasOne("Entities.Models.Site", "Site")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("SitesId")
                        .HasConstraintName("FK_SitesUtilisateurs");

                    b.Navigation("Profil");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Entities.Models.VentProd", b =>
                {
                    b.HasOne("Entities.Models.Disponibilite", "Disponibilite")
                        .WithMany("VentProds")
                        .HasForeignKey("DisponibilitesId")
                        .HasConstraintName("FK_DisponibilitesVent_Prod");

                    b.HasOne("Entities.Models.Service", "Service")
                        .WithMany("VentProds")
                        .HasForeignKey("ServicesId")
                        .HasConstraintName("FK_Vent_Prod_Vent_Prod");

                    b.HasOne("Entities.Models.Vente", "Vente")
                        .WithMany("VentProds")
                        .HasForeignKey("VentesId")
                        .HasConstraintName("FK_VentesVent_Prod")
                        .IsRequired();

                    b.Navigation("Disponibilite");

                    b.Navigation("Service");

                    b.Navigation("Vente");
                });

            modelBuilder.Entity("Entities.Models.Vente", b =>
                {
                    b.HasOne("Entities.Models.Client", "Client")
                        .WithMany("Ventes")
                        .HasForeignKey("ClientsId")
                        .HasConstraintName("FK_ClientsVentes")
                        .IsRequired();

                    b.HasOne("Entities.Models.NumeroCompte", "NumeroCompte")
                        .WithMany("Ventes")
                        .HasForeignKey("NumeroCompteId")
                        .HasConstraintName("FK_NumeroCompteVentes");

                    b.Navigation("Client");

                    b.Navigation("NumeroCompte");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Approvisionnement", b =>
                {
                    b.Navigation("ApproProduits");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("Produits");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Entities.Models.Client", b =>
                {
                    b.Navigation("Ventes");
                });

            modelBuilder.Entity("Entities.Models.Disponibilite", b =>
                {
                    b.Navigation("ApproSites");

                    b.Navigation("VentProds");
                });

            modelBuilder.Entity("Entities.Models.Fournisseur", b =>
                {
                    b.Navigation("Approvisionnements");
                });

            modelBuilder.Entity("Entities.Models.NumeroCompte", b =>
                {
                    b.Navigation("Ventes");
                });

            modelBuilder.Entity("Entities.Models.Produit", b =>
                {
                    b.Navigation("ApproProduits");

                    b.Navigation("Disponibilites");
                });

            modelBuilder.Entity("Entities.Models.Profil", b =>
                {
                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("Entities.Models.Service", b =>
                {
                    b.Navigation("VentProds");
                });

            modelBuilder.Entity("Entities.Models.Site", b =>
                {
                    b.Navigation("Disponibilites");

                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("Entities.Models.Vente", b =>
                {
                    b.Navigation("VentProds");
                });
#pragma warning restore 612, 618
        }
    }
}
